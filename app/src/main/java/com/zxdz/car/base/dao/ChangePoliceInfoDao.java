package com.zxdz.car.base.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zxdz.car.main.model.domain.ChangePoliceInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHANGE_POLICE_INFO".
*/
public class ChangePoliceInfoDao extends AbstractDao<ChangePoliceInfo, Long> {

    public static final String TABLENAME = "CHANGE_POLICE_INFO";

    /**
     * Properties of entity ChangePoliceInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Cid = new Property(1, int.class, "cid", false, "CID");
        public final static Property LsId = new Property(2, int.class, "lsId", false, "LS_ID");
        public final static Property OldCardNumber = new Property(3, String.class, "oldCardNumber", false, "OLD_CARD_NUMBER");
        public final static Property NewCardNumber = new Property(4, String.class, "newCardNumber", false, "NEW_CARD_NUMBER");
    }


    public ChangePoliceInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ChangePoliceInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHANGE_POLICE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CID\" INTEGER NOT NULL ," + // 1: cid
                "\"LS_ID\" INTEGER NOT NULL ," + // 2: lsId
                "\"OLD_CARD_NUMBER\" TEXT," + // 3: oldCardNumber
                "\"NEW_CARD_NUMBER\" TEXT);"); // 4: newCardNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHANGE_POLICE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChangePoliceInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCid());
        stmt.bindLong(3, entity.getLsId());
 
        String oldCardNumber = entity.getOldCardNumber();
        if (oldCardNumber != null) {
            stmt.bindString(4, oldCardNumber);
        }
 
        String newCardNumber = entity.getNewCardNumber();
        if (newCardNumber != null) {
            stmt.bindString(5, newCardNumber);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChangePoliceInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCid());
        stmt.bindLong(3, entity.getLsId());
 
        String oldCardNumber = entity.getOldCardNumber();
        if (oldCardNumber != null) {
            stmt.bindString(4, oldCardNumber);
        }
 
        String newCardNumber = entity.getNewCardNumber();
        if (newCardNumber != null) {
            stmt.bindString(5, newCardNumber);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChangePoliceInfo readEntity(Cursor cursor, int offset) {
        ChangePoliceInfo entity = new ChangePoliceInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // cid
            cursor.getInt(offset + 2), // lsId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // oldCardNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // newCardNumber
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChangePoliceInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCid(cursor.getInt(offset + 1));
        entity.setLsId(cursor.getInt(offset + 2));
        entity.setOldCardNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNewCardNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChangePoliceInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChangePoliceInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChangePoliceInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
