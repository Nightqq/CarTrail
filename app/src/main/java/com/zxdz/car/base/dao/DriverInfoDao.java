package com.zxdz.car.base.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zxdz.car.main.model.domain.DriverInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DRIVER_INFO".
*/
public class DriverInfoDao extends AbstractDao<DriverInfo, Long> {

    public static final String TABLENAME = "DRIVER_INFO";

    /**
     * Properties of entity DriverInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property WLJSYKH = new Property(1, String.class, "WLJSYKH", false, "WLJSYKH");
        public final static Property WLJSYSJ = new Property(2, java.util.Date.class, "WLJSYSJ", false, "WLJSYSJ");
        public final static Property JSYXM = new Property(3, String.class, "JSYXM", false, "JSYXM");
        public final static Property JSYXB = new Property(4, String.class, "JSYXB", false, "JSYXB");
        public final static Property JRSY = new Property(5, String.class, "JRSY", false, "JRSY");
        public final static Property JSYSFZ = new Property(6, String.class, "JSYSFZ", false, "JSYSFZ");
        public final static Property JSYSQBM = new Property(7, String.class, "JSYSQBM", false, "JSYSQBM");
    }


    public DriverInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DriverInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DRIVER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"WLJSYKH\" TEXT," + // 1: WLJSYKH
                "\"WLJSYSJ\" INTEGER," + // 2: WLJSYSJ
                "\"JSYXM\" TEXT," + // 3: JSYXM
                "\"JSYXB\" TEXT," + // 4: JSYXB
                "\"JRSY\" TEXT," + // 5: JRSY
                "\"JSYSFZ\" TEXT," + // 6: JSYSFZ
                "\"JSYSQBM\" TEXT);"); // 7: JSYSQBM
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DRIVER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DriverInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String WLJSYKH = entity.getWLJSYKH();
        if (WLJSYKH != null) {
            stmt.bindString(2, WLJSYKH);
        }
 
        java.util.Date WLJSYSJ = entity.getWLJSYSJ();
        if (WLJSYSJ != null) {
            stmt.bindLong(3, WLJSYSJ.getTime());
        }
 
        String JSYXM = entity.getJSYXM();
        if (JSYXM != null) {
            stmt.bindString(4, JSYXM);
        }
 
        String JSYXB = entity.getJSYXB();
        if (JSYXB != null) {
            stmt.bindString(5, JSYXB);
        }
 
        String JRSY = entity.getJRSY();
        if (JRSY != null) {
            stmt.bindString(6, JRSY);
        }
 
        String JSYSFZ = entity.getJSYSFZ();
        if (JSYSFZ != null) {
            stmt.bindString(7, JSYSFZ);
        }
 
        String JSYSQBM = entity.getJSYSQBM();
        if (JSYSQBM != null) {
            stmt.bindString(8, JSYSQBM);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DriverInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String WLJSYKH = entity.getWLJSYKH();
        if (WLJSYKH != null) {
            stmt.bindString(2, WLJSYKH);
        }
 
        java.util.Date WLJSYSJ = entity.getWLJSYSJ();
        if (WLJSYSJ != null) {
            stmt.bindLong(3, WLJSYSJ.getTime());
        }
 
        String JSYXM = entity.getJSYXM();
        if (JSYXM != null) {
            stmt.bindString(4, JSYXM);
        }
 
        String JSYXB = entity.getJSYXB();
        if (JSYXB != null) {
            stmt.bindString(5, JSYXB);
        }
 
        String JRSY = entity.getJRSY();
        if (JRSY != null) {
            stmt.bindString(6, JRSY);
        }
 
        String JSYSFZ = entity.getJSYSFZ();
        if (JSYSFZ != null) {
            stmt.bindString(7, JSYSFZ);
        }
 
        String JSYSQBM = entity.getJSYSQBM();
        if (JSYSQBM != null) {
            stmt.bindString(8, JSYSQBM);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DriverInfo readEntity(Cursor cursor, int offset) {
        DriverInfo entity = new DriverInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // WLJSYKH
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // WLJSYSJ
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // JSYXM
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // JSYXB
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // JRSY
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // JSYSFZ
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // JSYSQBM
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DriverInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWLJSYKH(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWLJSYSJ(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setJSYXM(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setJSYXB(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setJRSY(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setJSYSFZ(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setJSYSQBM(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DriverInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DriverInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DriverInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
