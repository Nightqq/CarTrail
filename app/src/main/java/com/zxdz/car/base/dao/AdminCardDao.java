package com.zxdz.car.base.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zxdz.car.main.model.domain.AdminCard;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADMIN_CARD".
*/
public class AdminCardDao extends AbstractDao<AdminCard, String> {

    public static final String TABLENAME = "ADMIN_CARD";

    /**
     * Properties of entity AdminCard.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Admin_num = new Property(0, String.class, "admin_num", true, "ADMIN_NUM");
        public final static Property Admin_name = new Property(1, String.class, "admin_name", false, "ADMIN_NAME");
        public final static Property Admin_terminal_num = new Property(2, String.class, "admin_terminal_num", false, "ADMIN_TERMINAL_NUM");
    }


    public AdminCardDao(DaoConfig config) {
        super(config);
    }
    
    public AdminCardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADMIN_CARD\" (" + //
                "\"ADMIN_NUM\" TEXT PRIMARY KEY NOT NULL ," + // 0: admin_num
                "\"ADMIN_NAME\" TEXT," + // 1: admin_name
                "\"ADMIN_TERMINAL_NUM\" TEXT);"); // 2: admin_terminal_num
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADMIN_CARD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AdminCard entity) {
        stmt.clearBindings();
 
        String admin_num = entity.getAdmin_num();
        if (admin_num != null) {
            stmt.bindString(1, admin_num);
        }
 
        String admin_name = entity.getAdmin_name();
        if (admin_name != null) {
            stmt.bindString(2, admin_name);
        }
 
        String admin_terminal_num = entity.getAdmin_terminal_num();
        if (admin_terminal_num != null) {
            stmt.bindString(3, admin_terminal_num);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AdminCard entity) {
        stmt.clearBindings();
 
        String admin_num = entity.getAdmin_num();
        if (admin_num != null) {
            stmt.bindString(1, admin_num);
        }
 
        String admin_name = entity.getAdmin_name();
        if (admin_name != null) {
            stmt.bindString(2, admin_name);
        }
 
        String admin_terminal_num = entity.getAdmin_terminal_num();
        if (admin_terminal_num != null) {
            stmt.bindString(3, admin_terminal_num);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public AdminCard readEntity(Cursor cursor, int offset) {
        AdminCard entity = new AdminCard( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // admin_num
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // admin_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // admin_terminal_num
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AdminCard entity, int offset) {
        entity.setAdmin_num(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAdmin_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAdmin_terminal_num(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(AdminCard entity, long rowId) {
        return entity.getAdmin_num();
    }
    
    @Override
    public String getKey(AdminCard entity) {
        if(entity != null) {
            return entity.getAdmin_num();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AdminCard entity) {
        return entity.getAdmin_num() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
