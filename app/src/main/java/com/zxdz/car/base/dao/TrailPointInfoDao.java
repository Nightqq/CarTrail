package com.zxdz.car.base.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zxdz.car.main.model.domain.TrailPointInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRAIL_POINT_INFO".
*/
public class TrailPointInfoDao extends AbstractDao<TrailPointInfo, Long> {

    public static final String TABLENAME = "TRAIL_POINT_INFO";

    /**
     * Properties of entity TrailPointInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property GJ_ID = new Property(1, int.class, "GJ_ID", false, "GJ__ID");
        public final static Property LS_ID = new Property(2, int.class, "LS_ID", false, "LS__ID");
        public final static Property GJZBJD = new Property(3, double.class, "GJZBJD", false, "GJZBJD");
        public final static Property GJZBWD = new Property(4, double.class, "GJZBWD", false, "GJZBWD");
        public final static Property GJSJ = new Property(5, java.util.Date.class, "GJSJ", false, "GJSJ");
        public final static Property SJJHBZ = new Property(6, int.class, "SJJHBZ", false, "SJJHBZ");
        public final static Property Result = new Property(7, String.class, "result", false, "RESULT");
    }


    public TrailPointInfoDao(DaoConfig config) {
        super(config);
    }
    
    public TrailPointInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRAIL_POINT_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"GJ__ID\" INTEGER NOT NULL ," + // 1: GJ_ID
                "\"LS__ID\" INTEGER NOT NULL ," + // 2: LS_ID
                "\"GJZBJD\" REAL NOT NULL ," + // 3: GJZBJD
                "\"GJZBWD\" REAL NOT NULL ," + // 4: GJZBWD
                "\"GJSJ\" INTEGER," + // 5: GJSJ
                "\"SJJHBZ\" INTEGER NOT NULL ," + // 6: SJJHBZ
                "\"RESULT\" TEXT);"); // 7: result
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRAIL_POINT_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TrailPointInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getGJ_ID());
        stmt.bindLong(3, entity.getLS_ID());
        stmt.bindDouble(4, entity.getGJZBJD());
        stmt.bindDouble(5, entity.getGJZBWD());
 
        java.util.Date GJSJ = entity.getGJSJ();
        if (GJSJ != null) {
            stmt.bindLong(6, GJSJ.getTime());
        }
        stmt.bindLong(7, entity.getSJJHBZ());
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(8, result);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TrailPointInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getGJ_ID());
        stmt.bindLong(3, entity.getLS_ID());
        stmt.bindDouble(4, entity.getGJZBJD());
        stmt.bindDouble(5, entity.getGJZBWD());
 
        java.util.Date GJSJ = entity.getGJSJ();
        if (GJSJ != null) {
            stmt.bindLong(6, GJSJ.getTime());
        }
        stmt.bindLong(7, entity.getSJJHBZ());
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(8, result);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TrailPointInfo readEntity(Cursor cursor, int offset) {
        TrailPointInfo entity = new TrailPointInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // GJ_ID
            cursor.getInt(offset + 2), // LS_ID
            cursor.getDouble(offset + 3), // GJZBJD
            cursor.getDouble(offset + 4), // GJZBWD
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // GJSJ
            cursor.getInt(offset + 6), // SJJHBZ
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // result
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TrailPointInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGJ_ID(cursor.getInt(offset + 1));
        entity.setLS_ID(cursor.getInt(offset + 2));
        entity.setGJZBJD(cursor.getDouble(offset + 3));
        entity.setGJZBWD(cursor.getDouble(offset + 4));
        entity.setGJSJ(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setSJJHBZ(cursor.getInt(offset + 6));
        entity.setResult(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TrailPointInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TrailPointInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TrailPointInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
