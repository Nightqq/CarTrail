package com.zxdz.car.base.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zxdz.car.main.model.domain.AreaInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AREA_INFO".
*/
public class AreaInfoDao extends AbstractDao<AreaInfo, Long> {

    public static final String TABLENAME = "AREA_INFO";

    /**
     * Properties of entity AreaInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AreaId = new Property(1, String.class, "areaId", false, "AREA_ID");
        public final static Property AreaName = new Property(2, String.class, "areaName", false, "AREA_NAME");
        public final static Property AreaRange = new Property(3, String.class, "areaRange", false, "AREA_RANGE");
        public final static Property AreaRoute = new Property(4, String.class, "areaRoute", false, "AREA_ROUTE");
        public final static Property AreaPoint = new Property(5, String.class, "areaPoint", false, "AREA_POINT");
        public final static Property AdminPunchIn = new Property(6, int.class, "adminPunchIn", false, "ADMIN_PUNCH_IN");
        public final static Property PolicePunChIn = new Property(7, int.class, "policePunChIn", false, "POLICE_PUN_CH_IN");
        public final static Property DriverPunchIn = new Property(8, int.class, "driverPunchIn", false, "DRIVER_PUNCH_IN");
        public final static Property Remark = new Property(9, String.class, "remark", false, "REMARK");
        public final static Property ZdjId = new Property(10, String.class, "zdjId", false, "ZDJ_ID");
    }


    public AreaInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AreaInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AREA_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"AREA_ID\" TEXT," + // 1: areaId
                "\"AREA_NAME\" TEXT," + // 2: areaName
                "\"AREA_RANGE\" TEXT," + // 3: areaRange
                "\"AREA_ROUTE\" TEXT," + // 4: areaRoute
                "\"AREA_POINT\" TEXT," + // 5: areaPoint
                "\"ADMIN_PUNCH_IN\" INTEGER NOT NULL ," + // 6: adminPunchIn
                "\"POLICE_PUN_CH_IN\" INTEGER NOT NULL ," + // 7: policePunChIn
                "\"DRIVER_PUNCH_IN\" INTEGER NOT NULL ," + // 8: driverPunchIn
                "\"REMARK\" TEXT," + // 9: remark
                "\"ZDJ_ID\" TEXT);"); // 10: zdjId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AREA_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AreaInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String areaId = entity.getAreaId();
        if (areaId != null) {
            stmt.bindString(2, areaId);
        }
 
        String areaName = entity.getAreaName();
        if (areaName != null) {
            stmt.bindString(3, areaName);
        }
 
        String areaRange = entity.getAreaRange();
        if (areaRange != null) {
            stmt.bindString(4, areaRange);
        }
 
        String areaRoute = entity.getAreaRoute();
        if (areaRoute != null) {
            stmt.bindString(5, areaRoute);
        }
 
        String areaPoint = entity.getAreaPoint();
        if (areaPoint != null) {
            stmt.bindString(6, areaPoint);
        }
        stmt.bindLong(7, entity.getAdminPunchIn());
        stmt.bindLong(8, entity.getPolicePunChIn());
        stmt.bindLong(9, entity.getDriverPunchIn());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(10, remark);
        }
 
        String zdjId = entity.getZdjId();
        if (zdjId != null) {
            stmt.bindString(11, zdjId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AreaInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String areaId = entity.getAreaId();
        if (areaId != null) {
            stmt.bindString(2, areaId);
        }
 
        String areaName = entity.getAreaName();
        if (areaName != null) {
            stmt.bindString(3, areaName);
        }
 
        String areaRange = entity.getAreaRange();
        if (areaRange != null) {
            stmt.bindString(4, areaRange);
        }
 
        String areaRoute = entity.getAreaRoute();
        if (areaRoute != null) {
            stmt.bindString(5, areaRoute);
        }
 
        String areaPoint = entity.getAreaPoint();
        if (areaPoint != null) {
            stmt.bindString(6, areaPoint);
        }
        stmt.bindLong(7, entity.getAdminPunchIn());
        stmt.bindLong(8, entity.getPolicePunChIn());
        stmt.bindLong(9, entity.getDriverPunchIn());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(10, remark);
        }
 
        String zdjId = entity.getZdjId();
        if (zdjId != null) {
            stmt.bindString(11, zdjId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AreaInfo readEntity(Cursor cursor, int offset) {
        AreaInfo entity = new AreaInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // areaId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // areaName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // areaRange
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // areaRoute
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // areaPoint
            cursor.getInt(offset + 6), // adminPunchIn
            cursor.getInt(offset + 7), // policePunChIn
            cursor.getInt(offset + 8), // driverPunchIn
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // remark
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // zdjId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AreaInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAreaId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAreaName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAreaRange(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAreaRoute(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAreaPoint(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAdminPunchIn(cursor.getInt(offset + 6));
        entity.setPolicePunChIn(cursor.getInt(offset + 7));
        entity.setDriverPunchIn(cursor.getInt(offset + 8));
        entity.setRemark(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setZdjId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AreaInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AreaInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AreaInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
