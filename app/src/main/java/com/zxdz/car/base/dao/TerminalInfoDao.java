package com.zxdz.car.base.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zxdz.car.main.model.domain.TerminalInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TERMINAL_INFO".
*/
public class TerminalInfoDao extends AbstractDao<TerminalInfo, Long> {

    public static final String TABLENAME = "TERMINAL_INFO";

    /**
     * Properties of entity TerminalInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ZdjId = new Property(1, String.class, "zdjId", false, "ZDJ_ID");
        public final static Property ZdjName = new Property(2, String.class, "zdjName", false, "ZDJ_NAME");
        public final static Property SimCardNumber = new Property(3, String.class, "simCardNumber", false, "SIM_CARD_NUMBER");
        public final static Property EquImel = new Property(4, String.class, "equImel", false, "EQU_IMEL");
        public final static Property AreaId = new Property(5, int.class, "areaId", false, "AREA_ID");
        public final static Property ServerIp = new Property(6, String.class, "serverIp", false, "SERVER_IP");
        public final static Property UseState = new Property(7, String.class, "useState", false, "USE_STATE");
        public final static Property Remark = new Property(8, String.class, "remark", false, "REMARK");
    }


    public TerminalInfoDao(DaoConfig config) {
        super(config);
    }
    
    public TerminalInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TERMINAL_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ZDJ_ID\" TEXT," + // 1: zdjId
                "\"ZDJ_NAME\" TEXT," + // 2: zdjName
                "\"SIM_CARD_NUMBER\" TEXT," + // 3: simCardNumber
                "\"EQU_IMEL\" TEXT," + // 4: equImel
                "\"AREA_ID\" INTEGER NOT NULL ," + // 5: areaId
                "\"SERVER_IP\" TEXT," + // 6: serverIp
                "\"USE_STATE\" TEXT," + // 7: useState
                "\"REMARK\" TEXT);"); // 8: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TERMINAL_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TerminalInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String zdjId = entity.getZdjId();
        if (zdjId != null) {
            stmt.bindString(2, zdjId);
        }
 
        String zdjName = entity.getZdjName();
        if (zdjName != null) {
            stmt.bindString(3, zdjName);
        }
 
        String simCardNumber = entity.getSimCardNumber();
        if (simCardNumber != null) {
            stmt.bindString(4, simCardNumber);
        }
 
        String equImel = entity.getEquImel();
        if (equImel != null) {
            stmt.bindString(5, equImel);
        }
        stmt.bindLong(6, entity.getAreaId());
 
        String serverIp = entity.getServerIp();
        if (serverIp != null) {
            stmt.bindString(7, serverIp);
        }
 
        String useState = entity.getUseState();
        if (useState != null) {
            stmt.bindString(8, useState);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(9, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TerminalInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String zdjId = entity.getZdjId();
        if (zdjId != null) {
            stmt.bindString(2, zdjId);
        }
 
        String zdjName = entity.getZdjName();
        if (zdjName != null) {
            stmt.bindString(3, zdjName);
        }
 
        String simCardNumber = entity.getSimCardNumber();
        if (simCardNumber != null) {
            stmt.bindString(4, simCardNumber);
        }
 
        String equImel = entity.getEquImel();
        if (equImel != null) {
            stmt.bindString(5, equImel);
        }
        stmt.bindLong(6, entity.getAreaId());
 
        String serverIp = entity.getServerIp();
        if (serverIp != null) {
            stmt.bindString(7, serverIp);
        }
 
        String useState = entity.getUseState();
        if (useState != null) {
            stmt.bindString(8, useState);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(9, remark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TerminalInfo readEntity(Cursor cursor, int offset) {
        TerminalInfo entity = new TerminalInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // zdjId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // zdjName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // simCardNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // equImel
            cursor.getInt(offset + 5), // areaId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // serverIp
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // useState
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TerminalInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setZdjId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setZdjName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSimCardNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEquImel(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAreaId(cursor.getInt(offset + 5));
        entity.setServerIp(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUseState(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRemark(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TerminalInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TerminalInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TerminalInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
