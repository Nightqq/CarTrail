package com.zxdz.car.base.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zxdz.car.main.model.domain.WarnInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WARN_INFO".
*/
public class WarnInfoDao extends AbstractDao<WarnInfo, Long> {

    public static final String TABLENAME = "WARN_INFO";

    /**
     * Properties of entity WarnInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Wid = new Property(1, int.class, "wid", false, "WID");
        public final static Property LsId = new Property(2, int.class, "lsId", false, "LS_ID");
        public final static Property WarnDate = new Property(3, java.util.Date.class, "warnDate", false, "WARN_DATE");
        public final static Property WarnContent = new Property(4, String.class, "warnContent", false, "WARN_CONTENT");
        public final static Property WarnType = new Property(5, int.class, "warnType", false, "WARN_TYPE");
        public final static Property DataState = new Property(6, int.class, "dataState", false, "DATA_STATE");
        public final static Property WarnPoliceNum = new Property(7, String.class, "warnPoliceNum", false, "WARN_POLICE_NUM");
        public final static Property WarnFlag = new Property(8, int.class, "warnFlag", false, "WARN_FLAG");
    }


    public WarnInfoDao(DaoConfig config) {
        super(config);
    }
    
    public WarnInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WARN_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"WID\" INTEGER NOT NULL ," + // 1: wid
                "\"LS_ID\" INTEGER NOT NULL ," + // 2: lsId
                "\"WARN_DATE\" INTEGER," + // 3: warnDate
                "\"WARN_CONTENT\" TEXT," + // 4: warnContent
                "\"WARN_TYPE\" INTEGER NOT NULL ," + // 5: warnType
                "\"DATA_STATE\" INTEGER NOT NULL ," + // 6: dataState
                "\"WARN_POLICE_NUM\" TEXT," + // 7: warnPoliceNum
                "\"WARN_FLAG\" INTEGER NOT NULL );"); // 8: warnFlag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WARN_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WarnInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getWid());
        stmt.bindLong(3, entity.getLsId());
 
        java.util.Date warnDate = entity.getWarnDate();
        if (warnDate != null) {
            stmt.bindLong(4, warnDate.getTime());
        }
 
        String warnContent = entity.getWarnContent();
        if (warnContent != null) {
            stmt.bindString(5, warnContent);
        }
        stmt.bindLong(6, entity.getWarnType());
        stmt.bindLong(7, entity.getDataState());
 
        String warnPoliceNum = entity.getWarnPoliceNum();
        if (warnPoliceNum != null) {
            stmt.bindString(8, warnPoliceNum);
        }
        stmt.bindLong(9, entity.getWarnFlag());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WarnInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getWid());
        stmt.bindLong(3, entity.getLsId());
 
        java.util.Date warnDate = entity.getWarnDate();
        if (warnDate != null) {
            stmt.bindLong(4, warnDate.getTime());
        }
 
        String warnContent = entity.getWarnContent();
        if (warnContent != null) {
            stmt.bindString(5, warnContent);
        }
        stmt.bindLong(6, entity.getWarnType());
        stmt.bindLong(7, entity.getDataState());
 
        String warnPoliceNum = entity.getWarnPoliceNum();
        if (warnPoliceNum != null) {
            stmt.bindString(8, warnPoliceNum);
        }
        stmt.bindLong(9, entity.getWarnFlag());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WarnInfo readEntity(Cursor cursor, int offset) {
        WarnInfo entity = new WarnInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // wid
            cursor.getInt(offset + 2), // lsId
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // warnDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // warnContent
            cursor.getInt(offset + 5), // warnType
            cursor.getInt(offset + 6), // dataState
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // warnPoliceNum
            cursor.getInt(offset + 8) // warnFlag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WarnInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWid(cursor.getInt(offset + 1));
        entity.setLsId(cursor.getInt(offset + 2));
        entity.setWarnDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setWarnContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWarnType(cursor.getInt(offset + 5));
        entity.setDataState(cursor.getInt(offset + 6));
        entity.setWarnPoliceNum(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWarnFlag(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WarnInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WarnInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WarnInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
